{
  "_args": [
    [
      {
        "raw": "passport-http-bearer@1.0.1",
        "scope": null,
        "escapedName": "passport-http-bearer",
        "name": "passport-http-bearer",
        "rawSpec": "1.0.1",
        "spec": "1.0.1",
        "type": "version"
      },
      "/home/vagrant/nodegen/inst/node/nodered_custom/node_modules/node-red"
    ]
  ],
  "_from": "passport-http-bearer@1.0.1",
  "_id": "passport-http-bearer@1.0.1",
  "_inCache": true,
  "_location": "/passport-http-bearer",
  "_npmUser": {
    "name": "jaredhanson",
    "email": "jaredhanson@gmail.com"
  },
  "_npmVersion": "1.2.25",
  "_phantomChildren": {},
  "_requested": {
    "raw": "passport-http-bearer@1.0.1",
    "scope": null,
    "escapedName": "passport-http-bearer",
    "name": "passport-http-bearer",
    "rawSpec": "1.0.1",
    "spec": "1.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/node-red"
  ],
  "_resolved": "https://registry.npmjs.org/passport-http-bearer/-/passport-http-bearer-1.0.1.tgz",
  "_shasum": "147469ea3669e2a84c6167ef99dbb77e1f0098a8",
  "_shrinkwrap": null,
  "_spec": "passport-http-bearer@1.0.1",
  "_where": "/home/vagrant/nodegen/inst/node/nodered_custom/node_modules/node-red",
  "author": {
    "name": "Jared Hanson",
    "email": "jaredhanson@gmail.com",
    "url": "http://www.jaredhanson.net/"
  },
  "bugs": {
    "url": "http://github.com/jaredhanson/passport-http-bearer/issues"
  },
  "dependencies": {
    "passport-strategy": "1.x.x"
  },
  "description": "HTTP Bearer authentication strategy for Passport.",
  "devDependencies": {
    "chai": "1.x.x",
    "chai-passport-strategy": "0.1.x",
    "mocha": "1.x.x"
  },
  "directories": {},
  "dist": {
    "shasum": "147469ea3669e2a84c6167ef99dbb77e1f0098a8",
    "tarball": "https://registry.npmjs.org/passport-http-bearer/-/passport-http-bearer-1.0.1.tgz"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "homepage": "https://github.com/jaredhanson/passport-http-bearer#readme",
  "keywords": [
    "passport",
    "auth",
    "authn",
    "authentication",
    "authz",
    "authorization",
    "http",
    "bearer",
    "token",
    "oauth"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib",
  "maintainers": [
    {
      "name": "jaredhanson",
      "email": "jaredhanson@gmail.com"
    }
  ],
  "name": "passport-http-bearer",
  "optionalDependencies": {},
  "readme": "# passport-http-bearer\n\n[![Build](https://travis-ci.org/jaredhanson/passport-http-bearer.png)](http://travis-ci.org/jaredhanson/passport-http-bearer)\n[![Coverage](https://coveralls.io/repos/jaredhanson/passport-http-bearer/badge.png)](https://coveralls.io/r/jaredhanson/passport-http-bearer)\n[![Dependencies](https://david-dm.org/jaredhanson/passport-http-bearer.png)](http://david-dm.org/jaredhanson/passport-http-bearer)\n\n\nHTTP Bearer authentication strategy for [Passport](http://passportjs.org/).\n\nThis module lets you authenticate HTTP requests using bearer tokens, as\nspecified by [RFC 6750](http://tools.ietf.org/html/rfc6750), in your Node.js\napplications.  Bearer tokens are typically used protect API endpoints, and are\noften issued using OAuth 2.0.\n\nBy plugging into Passport, bearer token support can be easily and unobtrusively\nintegrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-http-bearer\n\n## Usage\n\n#### Configure Strategy\n\nThe HTTP Bearer authentication strategy authenticates users using a bearer\ntoken.  The strategy requires a `verify` callback, which accepts that\ncredential and calls `done` providing a user.  Optional `info` can be passed,\ntypically including associated scope, which will be set by Passport at\n`req.authInfo` to be used by later middleware for authorization and access\ncontrol.\n\n    passport.use(new BearerStrategy(\n      function(token, done) {\n        User.findOne({ token: token }, function (err, user) {\n          if (err) { return done(err); }\n          if (!user) { return done(null, false); }\n          return done(null, user, { scope: 'all' });\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'bearer'` strategy, to\nauthenticate requests.  Requests containing bearer tokens do not require session\nsupport, so the `session` option can be set to `false`.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/profile', \n      passport.authenticate('bearer', { session: false }),\n      function(req, res) {\n        res.json(req.user);\n      });\n\n#### Issuing Tokens\n\nBearer tokens are typically issued using OAuth 2.0.  [OAuth2orize](https://github.com/jaredhanson/oauth2orize)\nis a toolkit for implementing OAuth 2.0 servers and issuing bearer tokens.  Once\nissued, this module can be used to authenticate tokens as described above.\n\n## Examples\n\nFor a complete, working example, refer to the [Bearer example](https://github.com/jaredhanson/passport-http-bearer/tree/master/examples/bearer).\n\n## Related Modules\n\n- [OAuth2orize](https://github.com/jaredhanson/oauth2orize) â€” OAuth 2.0 authorization server toolkit\n\n## Tests\n\n    $ npm install\n    $ npm test\n\n## Credits\n\n  - [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2011-2013 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/jaredhanson/passport-http-bearer.git"
  },
  "scripts": {
    "test": "node_modules/.bin/mocha --reporter spec --require test/bootstrap/node test/*.test.js"
  },
  "testling": {
    "browsers": [
      "chrome/latest"
    ],
    "harness": "mocha",
    "files": [
      "test/bootstrap/testling.js",
      "test/*.test.js"
    ]
  },
  "version": "1.0.1"
}
